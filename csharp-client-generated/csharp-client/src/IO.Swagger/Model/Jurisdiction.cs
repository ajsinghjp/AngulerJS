/* 
 * WebAPIJourney
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Jurisdiction
    /// </summary>
    [DataContract]
    public partial class Jurisdiction :  IEquatable<Jurisdiction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Jurisdiction" /> class.
        /// </summary>
        /// <param name="Jurisdiction1">Jurisdiction1.</param>
        /// <param name="Country">Country.</param>
        /// <param name="State">State.</param>
        /// <param name="Area">Area.</param>
        /// <param name="PostalCode">PostalCode.</param>
        /// <param name="ExternalMapCode">ExternalMapCode.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="ShortName">ShortName.</param>
        public Jurisdiction(int? Jurisdiction1 = default(int?), int? Country = default(int?), int? State = default(int?), int? Area = default(int?), string PostalCode = default(string), string ExternalMapCode = default(string), string FullName = default(string), string ShortName = default(string))
        {
            this.Jurisdiction1 = Jurisdiction1;
            this.Country = Country;
            this.State = State;
            this.Area = Area;
            this.PostalCode = PostalCode;
            this.ExternalMapCode = ExternalMapCode;
            this.FullName = FullName;
            this.ShortName = ShortName;
        }
        
        /// <summary>
        /// Gets or Sets Jurisdiction1
        /// </summary>
        [DataMember(Name="Jurisdiction1", EmitDefaultValue=false)]
        public int? Jurisdiction1 { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public int? Country { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="Area", EmitDefaultValue=false)]
        public int? Area { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets ExternalMapCode
        /// </summary>
        [DataMember(Name="ExternalMapCode", EmitDefaultValue=false)]
        public string ExternalMapCode { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="ShortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Jurisdiction {\n");
            sb.Append("  Jurisdiction1: ").Append(Jurisdiction1).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  ExternalMapCode: ").Append(ExternalMapCode).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Jurisdiction);
        }

        /// <summary>
        /// Returns true if Jurisdiction instances are equal
        /// </summary>
        /// <param name="other">Instance of Jurisdiction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Jurisdiction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Jurisdiction1 == other.Jurisdiction1 ||
                    this.Jurisdiction1 != null &&
                    this.Jurisdiction1.Equals(other.Jurisdiction1)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Area == other.Area ||
                    this.Area != null &&
                    this.Area.Equals(other.Area)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.ExternalMapCode == other.ExternalMapCode ||
                    this.ExternalMapCode != null &&
                    this.ExternalMapCode.Equals(other.ExternalMapCode)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.ShortName == other.ShortName ||
                    this.ShortName != null &&
                    this.ShortName.Equals(other.ShortName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Jurisdiction1 != null)
                    hash = hash * 59 + this.Jurisdiction1.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Area != null)
                    hash = hash * 59 + this.Area.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.ExternalMapCode != null)
                    hash = hash * 59 + this.ExternalMapCode.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.ShortName != null)
                    hash = hash * 59 + this.ShortName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
